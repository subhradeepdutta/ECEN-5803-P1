/**----------------------------------------------------------------------------
 
   \file main.cpp

--                                                                           --
--              ECEN 5803 Mastering Embedded System Architecture             --
--                  Project 1 Module 3                                       --
--                Microcontroller Firmware                                   --
--                      main.cpp                                             --
--                                                                           --
-------------------------------------------------------------------------------
--
--  Designed for:  University of Colorado at Boulder
--               
--                
--  Designed by:  Tim Scherr
--  Revised by: Tristan Lennertz, Subhradeep Dutta, & Omkar Prabhu 
-- 
-- Version: 2.1
-- Date of current revision:  2017-02
-- Target Microcontroller: Freescale MKL25ZVMT4 
-- Tools used:  ARM mbed compiler
--              ARM mbed SDK
--              Freescale FRDM-KL25Z Freedom Board
--               
-- 
-- Functional Description:  Main code file generated by mbed, and then
--                          modified to implement a super loop bare metal OS.
--
--      Copyright (c) 2015, 2016 Tim Scherr  All rights reserved.
--
*/

#define MAIN
#include "shared.h"
#undef MAIN

#include "mbed.h"

extern volatile uint16_t SwTimerIsrCounter; 


Ticker tick;    /* Creates a timer interrupt using mbed methods */

/****************      ECEN 5803 add code as indicated   ***************/

/* Add code to control red, green and blue LEDs here */
DigitalOut greenLED(LED_GREEN);
DigitalOut redLED(LED_RED);
DigitalOut blueLED(LED_BLUE);
                                                    
/* Create a serial class object for UART communication */
Serial pc(USBTX, USBRX);     
 
void flip()  
{                
	redLED = !redLED;
}
 
int main() 
{
	/* Start with all LEDs off */
	greenLED = 1; 
	redLED = 1;
	blueLED = 1; 

	/*  Add code to call timer0 function every 100 uS */
	tick.attach(&timer0, 0.0001);

	uint32_t  count = 0;   

	/* initialize serial buffer pointers */
	rx_in_ptr =  rx_buf; /* pointer to the receive in data */
	rx_out_ptr = rx_buf; /* pointer to the receive out data*/
	tx_in_ptr =  tx_buf; /* pointer to the transmit in data*/
	tx_out_ptr = tx_buf; /* pointer to the transmit out */


	/* Print the initial banner */
	pc.printf("\r\nHello World!\n\n\r");

	/****************      ECEN 5803 add code as indicated   ***************/

	/* send a message to the terminal  */                    
	UART_direct_msg_put("\r\nSystem Reset\r\nCode ver. ");
	UART_direct_msg_put( CODE_VERSION );
	UART_direct_msg_put("\r\n");
	UART_direct_msg_put( COPYRIGHT );
	UART_direct_msg_put("\r\n");

	set_display_mode();                                        

	/* Cyclical Executive Loop */
	while(1)
	{
		/* counts the number of times through the loop */
		count++;                

		__enable_irq();

		/***************      ECEN 5803 add code as indicated   ***************/

		serial();               /* Polls the serial port */
		chk_UART_msg();         /* checks for a serial port message received */

		/* Sends serial port output depending on commands received/mode */
		monitor();

		/* Red LED toggle every 0.5 s, based on timer0 setting led_flag */
		if (led_flag)
		{
		  flip();  // Toggle Red LED
			
			led_flag = 0; 
		}
	}

}

