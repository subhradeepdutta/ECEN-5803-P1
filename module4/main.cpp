/**----------------------------------------------------------------------------
 
   \file main.cpp
--                                                                           --
--              ECEN 5803 Mastering Embedded System Architecture             --
--                  Project 1 Module 4                                       --
--                Microcontroller Firmware                                   --
--                      main.cpp                                             --
--                                                                           --
-------------------------------------------------------------------------------
--
--  Designed for:  University of Colorado at Boulder
--               
--                
--  Designed by:  Tim Scherr
--  Revised by:  Tristan Lennertz, Subhradeep Dutta, & Omkar Prabhu 
-- 
-- Version: 2.1
-- Date of current revision:  2017-02 
-- Target Microcontroller: Freescale MKL25ZVMT4 
-- Tools used:  ARM mbed compiler
--              ARM mbed SDK
--              Freescale FRDM-KL25Z Freedom Board
--               
-- 
-- Functional Description:  Main code file generated by mbed, and then
--                           modified to implement a super loop bare metal OS.
--
--      Copyright (c) 2015, 2016 Tim Scherr  All rights reserved.
--
*/

#define MAIN
#include "shared.h"
#undef MAIN

#define ADC_0                   (0U)
#define CHANNEL_0               (0U)
#define CHANNEL_1               (1U)
#define CHANNEL_2               (2U)
#define LED_ON                  (0U)
#define LED_OFF                 (1U)
#define ADCR_VDD                (65535U)    /*! Maximum value when use 16b resolution */
#define V_BG                    (1000U)     /*! BANDGAP voltage in mV (trim to 1.0V) */
#define V_TEMP25                (716U)      /*! Typical VTEMP25 in mV */
#define M                       (1620U)     /*! Typical slope: (mV x 1000)/oC */
#define STANDARD_TEMP           (25)


extern volatile uint16_t SwTimerIsrCounter; 

/**
 * @brief mbed Timer interrupt object 
 */
Ticker tick;

/**
 * @brief mbed object for green LED 
 */
DigitalOut greenLED(LED_GREEN);

/**
 * @brief mbed object for red LED 
 */
DigitalOut redLED(LED_RED);

/**
 * @brief mbed object for blue LED 
 */
DigitalOut blueLED(LED_BLUE);

/**
 * @brief mbed serial class object for UART communication 
 */
Serial pc(USBTX, USBRX);

/**
 *@brief Toggles the on/off state of the green LED
 */
void flip_g() 
{
    greenLED = !greenLED;
}

/**
 *@brief Toggles the on/off state of the red LED
 */
void flip_r()  
{                
	redLED = !redLED;
}
 
int main() 
{
  /* Start with all LEDs off */
	greenLED = 1; 
	redLED = 1;
	blueLED = 1; 
  
	/*  Call timer0 function every 100 uS */
	tick.attach(&timer0, 0.0001);

    pc.printf("Hello World!\n"); 
    uint32_t  count = 0;   
    
  /* initialize serial buffer pointers */
   rx_in_ptr =  rx_buf; /* pointer to the receive in data */
   rx_out_ptr = rx_buf; /* pointer to the receive out data*/
   tx_in_ptr =  tx_buf; /* pointer to the transmit in data*/
   tx_out_ptr = tx_buf; /*pointer to the transmit out */
    
   
  /* Print the initial banner */ 
	pc.printf("\r\n*************************************\r\r");
	pc.printf("\r\nProject by Tristan, Subhradeep, Omkar\r\r");
	pc.printf("\r\n*************************************\r\r");

  /* send a message to the terminal  */                    
  UART_direct_msg_put("\r\nSystem Reset\r\nCode ver. ");
  UART_direct_msg_put( CODE_VERSION );
  UART_direct_msg_put("\r\n");
  UART_direct_msg_put( COPYRIGHT );
  UART_direct_msg_put("\r\n");

  set_display_mode();                                      
   
	/* Cyclical Executive Loop */
  while(1)
  {
    /* counts the number of times through the loop */
    count++;
    __enable_irq();

    serial();             // Polls the serial port
    chk_UART_msg();       // checks for a serial port message received
    monitor();            // Sends serial port output messages depending
                          //  on commands received and display mode

    /****************      ECEN 5803 add code as indicated   ***************/
    // if adc_flag set
		
		// readADC()
		
		// calculate frequency()
		// calculate temperature()

    //  calculate flow()

    //  4-20 output ()    // use TMP0 channel 3  proporional rate to flow

    //  Pulse output()   // use TMP0 channel 4  propotional rate to frequency

    //  LCD_Display()   // use the SPI port to send flow number
		
		// clear adc_flag

    //  End ECEN 5803 code addition


    if ((SwTimerIsrCounter & 0x1FFF) > 0x0FFF)

    {
      flip_g();  // Toggle Green LED
    }
    
    /* Red LED toggle every 0.5 s, based on timer0 setting led_flag */
		if (led_flag)
		{
		  flip_r();  // Toggle Red LED
			
			led_flag = 0; 
		}
  } 
       
}

